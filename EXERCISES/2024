{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNDSTqIJdAOImbbj87QmsgH",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Serhat-Srt/Math-2024-25-Winter/blob/main/EXERCISES/2024\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_vGzgm_4x-0Q",
        "outputId": "13cfb38a-5f69-4759-d57c-0ebca0a37ff8"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 6  8]\n",
            " [10 12]]\n",
            "[[4 4]\n",
            " [4 4]]\n",
            "[[0 4]\n",
            " [6 4]]\n",
            "[[ 0  6 10]\n",
            " [ 6  5 14]]\n",
            "[[0.5 1. ]\n",
            " [1.5 2. ]]\n",
            "[[10 12]\n",
            " [14 16]]\n",
            "[[ 3 -6]\n",
            " [-9  0]]\n",
            "[[-4  8 12]\n",
            " [16  0 24]]\n",
            "[[19 22]\n",
            " [43 50]]\n",
            "[[23 34]\n",
            " [31 46]]\n",
            "[[ 7  2]\n",
            " [13  6]]\n",
            "[[28 32]\n",
            " [46 56]]\n"
          ]
        }
      ],
      "source": [
        "import numpy as np\n",
        "\n",
        "# 1. Question\n",
        "A = np.array([[1, 2], [3, 4]])\n",
        "B = np.array([[5, 6], [7, 8]])\n",
        "C = np.array([[-1, 2], [3, 0]])\n",
        "D = np.array([[-1, 2, 3], [4, 0, 6]])\n",
        "E = np.array([[1, 2], [4, 5], [7, 8]])\n",
        "\n",
        "print(A + B)\n",
        "print(B - A)\n",
        "print(A + C)\n",
        "print(D + E.T)\n",
        "\n",
        "print(0.5 * A)\n",
        "print(2 * B)\n",
        "print(-3 * C)\n",
        "print(4 * D)\n",
        "\n",
        "print(A @ B)\n",
        "print(B @ A)\n",
        "print(A @ D[:, :2])\n",
        "print(D @ E)"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 2. Determinants 2x2 and 3x3\n",
        "import numpy as np\n",
        "\n",
        "A = np.array([[2, 3], [1, 4]])\n",
        "B = np.array([[5, 6], [7, 8]])\n",
        "C = np.array([[-1, 2], [3, 0]])\n",
        "print(np.linalg.det(A), np.linalg.det(B), np.linalg.det(C))\n",
        "\n",
        "D = np.array([[1, 0, 2], [-1, 3, 1], [2, 4, -2]])\n",
        "E = np.array([[3, 1, -1], [0, 2, 4], [2, 0, -2]])\n",
        "F = np.array([[2, -3, 1], [4, -1, -2], [1, 5, 3]])\n",
        "print(np.linalg.det(D), np.linalg.det(E), np.linalg.det(F))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "GyG-XBmrykbI",
        "outputId": "7cedf385-4d0f-4596-91da-3fde872c6ae4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "5.000000000000001 -2.000000000000005 -6.0\n",
            "-29.99999999999999 0.0 77.00000000000001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 3. Determinants using Laplace's Expansion\n",
        "A = np.array([[2, 3, 1], [1, 4, 0], [3, 2, 0]])\n",
        "B = np.array([[2, 3, 1], [4, 0, 0], [3, 2, 0]])\n",
        "C = np.array([[2, 3, 1, 4], [1, 0, 0, 6], [3, 2, 1, 5], [2, 1, 4, 0]])\n",
        "D = np.array([[2, 3, 1, 5], [4, 0, 0, 7], [3, 2, 1, 4], [2, 1, 4, 5]])\n",
        "print(np.linalg.det(A), np.linalg.det(B), np.linalg.det(C), np.linalg.det(D))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dUEkgzoiy-jS",
        "outputId": "2c956f6c-8731-438c-f984-6234c593f0fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-10.000000000000002 7.999999999999998 -74.99999999999997 -103.00000000000001\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 4. Determinants from the Gauss Method and Triangular Matrices\n",
        "A = np.array([[12, 3], [-18, -4]])\n",
        "B = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "\n",
        "def triangular_det(matrix):\n",
        "    upper = np.linalg.qr(matrix)[1]\n",
        "    return np.prod(np.diag(upper))\n",
        "\n",
        "print(triangular_det(A), triangular_det(B))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jVkRwyZ3y_9K",
        "outputId": "5a82d733-4040-4b60-c88c-f1bdd14d2d8a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "-5.999999999999994 6.526751786450499e-15\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 5. Inverse of a Matrix from the Formula\n",
        "\n",
        "A = np.array([[2, 0, 1], [0, 1, 0], [1, 2, 0]])\n",
        "inv_A = np.linalg.inv(A)\n",
        "print(inv_A)\n",
        "print(np.allclose(np.dot(A, inv_A), np.eye(3)))\n",
        "\n",
        "B = np.array([[4, -3, 7], [-1, 6, 3], [2, 9, 1]])\n",
        "rank_B = np.linalg.matrix_rank(B)\n",
        "print(rank_B)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "h5vzZl2HzByY",
        "outputId": "08d58c96-5f17-48a5-d9fa-875aa40e049a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0. -2.  1.]\n",
            " [ 0.  1.  0.]\n",
            " [ 1.  4. -2.]]\n",
            "True\n",
            "3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 6. Inverse of a Matrix using the Gauss Method\n",
        "import numpy as np\n",
        "\n",
        "A = np.array([[1, 2], [3, 4]])\n",
        "B = np.array([[1, 2, 3], [4, 5, 1], [2, 3, 2]])\n",
        "C = np.array([[0, 0, 1], [0, 1, 0], [1, 0, 0]])\n",
        "\n",
        "inv_A = np.linalg.inv(A)\n",
        "inv_B = np.linalg.inv(B)\n",
        "inv_C = np.linalg.inv(C)\n",
        "\n",
        "print(\"Inverse of A:\\n\", inv_A)\n",
        "print(\"Inverse of B:\\n\", inv_B)\n",
        "print(\"Inverse of C:\\n\", inv_C)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "s5ayhGr_zEZw",
        "outputId": "4881efd8-1761-492b-a333-3c89713af95d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Inverse of A:\n",
            " [[-2.   1. ]\n",
            " [ 1.5 -0.5]]\n",
            "Inverse of B:\n",
            " [[  7.   5. -13.]\n",
            " [ -6.  -4.  11.]\n",
            " [  2.   1.  -3.]]\n",
            "Inverse of C:\n",
            " [[0. 0. 1.]\n",
            " [0. 1. 0.]\n",
            " [1. 0. 0.]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 7. Linear Equations old school\n",
        "\n",
        "from sympy import symbols, Eq, solve\n",
        "\n",
        "x, y = symbols('x y')\n",
        "\n",
        "# First system of equations\n",
        "eq1 = Eq(3*x - 2*y, 5)\n",
        "eq2 = Eq(2*x + 3*y, 7)\n",
        "\n",
        "sol = solve((eq1, eq2), (x, y))\n",
        "print(\"Solution:\", sol)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JSsPvzExzaA6",
        "outputId": "9057c46e-2f82-473f-fb8c-bf8164787050"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution: {x: 29/13, y: 11/13}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 8. Linear equations by Cramer's Rule\n",
        "import numpy as np\n",
        "\n",
        "def cramers_rule(coeff_matrix, constants):\n",
        "    det_main = np.linalg.det(coeff_matrix)\n",
        "    if det_main == 0:\n",
        "        return \"System has no unique solution\"\n",
        "    solutions = []\n",
        "    for i in range(len(constants)):\n",
        "        temp_matrix = coeff_matrix.copy()\n",
        "        temp_matrix[:, i] = constants\n",
        "        solutions.append(np.linalg.det(temp_matrix) / det_main)\n",
        "    return solutions\n",
        "\n",
        "# First system\n",
        "coeff_matrix_1 = np.array([[2, -3], [3, 5]])\n",
        "constants_1 = np.array([7, 2])\n",
        "\n",
        "result_1 = cramers_rule(coeff_matrix_1, constants_1)\n",
        "print(\"Solution for the first system:\", result_1)\n",
        "\n",
        "# Second system\n",
        "coeff_matrix_2 = np.array([[2, 1, -1], [-1, 2, 5], [3, -2, -1]])\n",
        "constants_2 = np.array([1, 4, -1])\n",
        "\n",
        "result_2 = cramers_rule(coeff_matrix_2, constants_2)\n",
        "print(\"Solution for the second system:\", result_2)\n",
        "\n",
        "# Third system\n",
        "coeff_matrix_3 = np.array([[1, 1, 1], [1, -3, 2], [2, -3, 4]])\n",
        "constants_3 = np.array([2, 6, -2])\n",
        "\n",
        "result_3 = cramers_rule(coeff_matrix_3, constants_3)\n",
        "print(\"Solution for the third system:\", result_3)\n",
        "\n",
        "# Fourth system (Check determinant)\n",
        "coeff_matrix_4 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "constants_4 = np.array([3, 6, 1])\n",
        "\n",
        "det_main_4 = np.linalg.det(coeff_matrix_4)\n",
        "\n",
        "if det_main_4 == 0:\n",
        "    print(\"The fourth system cannot be solved using Cramer's Rule because the determinant of the coefficient matrix is zero.\")\n",
        "else:\n",
        "    result_4 = cramers_rule(coeff_matrix_4, constants_4)\n",
        "    print(\"Solution for the fourth system:\", result_4)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dgyoy_tozdD5",
        "outputId": "af69853c-ee20-4083-b1b5-a65e84a73cd9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Solution for the first system: [2.157894736842106, -0.8947368421052633]\n",
            "Solution for the second system: [0.3823529411764705, 0.7941176470588234, 0.5588235294117645]\n",
            "Solution for the third system: [21.33333333333332, -4.666666666666664, -14.666666666666668]\n",
            "The fourth system cannot be solved using Cramer's Rule because the determinant of the coefficient matrix is zero.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 9. Linear Equations by Gauss Elimination\n",
        "import numpy as np\n",
        "\n",
        "A1 = np.array([[1, 2, -2], [2, -1, 2], [3, 2, 1]])\n",
        "b1 = np.array([4, 0, 1])\n",
        "x1 = np.linalg.solve(A1, b1)\n",
        "print(x1)\n",
        "\n",
        "A2 = np.array([[1, 1, -1], [2, -1, 3], [3, -2, 0]])\n",
        "b2 = np.array([-2, 3, -1])\n",
        "x2 = np.linalg.solve(A2, b2)\n",
        "print(x2)\n",
        "\n",
        "A3 = np.array([[1, 1, -2], [2, 3, -2], [3, 5, 0]])\n",
        "b3 = np.array([0, 4, 3])\n",
        "x3 = np.linalg.solve(A3, b3)\n",
        "print(x3)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "wprknMmnzeva",
        "outputId": "d0adab86-66ef-4449-c852-daf55c8aeb1d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1.63636364 -0.90909091 -2.09090909]\n",
            "[-0.5  -0.25  1.25]\n",
            "[-14.    9.   -2.5]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 10. Linear Equations by Matrix Inversion\n",
        "# 1. System of equations\n",
        "A4 = np.array([[1, 2, 3], [0, 2, 3], [0, 0, 3]])\n",
        "b4 = np.array([5, 4, 3])\n",
        "x4 = np.linalg.inv(A4) @ b4\n",
        "print(x4)\n",
        "\n",
        "# 2. System of equations\n",
        "A5 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
        "b5 = np.array([41, 93, 145])\n",
        "x5 = np.linalg.inv(A5) @ b5\n",
        "print(x5)\n",
        "\n"
      ],
      "metadata": {
        "id": "wQ_PQBQY0JGA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# 11. Vectors I\n",
        "# 1. Find scalar for vector [3, 4]\n",
        "a = np.array([3, 4])\n",
        "scale = 1 / np.linalg.norm(a)\n",
        "print(scale)\n",
        "\n",
        "# 2. Length and unit vector of [1, 1]\n",
        "b = np.array([1, 1])\n",
        "length_b = np.linalg.norm(b)\n",
        "unit_b = b / length_b\n",
        "print(length_b, unit_b)\n",
        "\n",
        "# 3. Plot vector and unit vector\n",
        "import matplotlib.pyplot as plt\n",
        "plt.quiver(0, 0, b[0], b[1], angles='xy', scale_units='xy', scale=1, color='b', label=\"Vector b\")\n",
        "plt.quiver(0, 0, unit_b[0], unit_b[1], angles='xy', scale_units='xy', scale=1, color='g', label=\"Unit vector\")\n",
        "plt.xlim(-1, 2)\n",
        "plt.ylim(-1, 2)\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# 4. Length and unit vector of [1, 2, 3]\n",
        "c = np.array([1, 2, 3])\n",
        "length_c = np.linalg.norm(c)\n",
        "unit_c = c / length_c\n",
        "print(length_c, unit_c)\n",
        "\n",
        "# 5. Cartesian coordinates in basis\n",
        "v = np.array([2, 3, 4])\n",
        "b1 = np.array([1, 0, 1])\n",
        "b2 = np.array([0, 1, 0])\n",
        "b3 = np.array([1, 0, -1])\n",
        "coords = [np.dot(v, b1), np.dot(v, b2), np.dot(v, b3)]\n",
        "print(coords)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "pEV4GQLU0TMF",
        "outputId": "c8659137-cf08-4f7b-e20c-1a833dc882af"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.2\n",
            "1.4142135623730951 [0.70710678 0.70710678]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.7416573867739413 [0.26726124 0.53452248 0.80178373]\n",
            "[6, 3, -2]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 12. Vectors II\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "v1 = np.array([2, 1])\n",
        "v2 = np.array([-1, 1])\n",
        "v_sum = v1 + v2\n",
        "\n",
        "# Plotting\n",
        "plt.quiver(0, 0, v1[0], v1[1], angles='xy', scale_units='xy', scale=1, color='r', label=\"v1\")\n",
        "plt.quiver(0, 0, v2[0], v2[1], angles='xy', scale_units='xy', scale=1, color='b', label=\"v2\")\n",
        "plt.quiver(0, 0, v_sum[0], v_sum[1], angles='xy', scale_units='xy', scale=1, color='g', label=\"v1 + v2\")\n",
        "plt.xlim(-2, 4)\n",
        "plt.ylim(-2, 4)\n",
        "plt.axhline(0, color='black', linewidth=0.5)\n",
        "plt.axvline(0, color='black', linewidth=0.5)\n",
        "plt.grid()\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "v1 = np.array([2, 1])\n",
        "v2 = np.array([-1, 1])\n",
        "area = 0.5 * np.abs(np.cross(v1, v2))\n",
        "print(\"Area of the triangle:\", area)\n",
        "\n",
        "v1 = np.array([2, 1, 1])\n",
        "v2 = np.array([-1, 1, 1])\n",
        "v3 = np.array([1, 2, 1])\n",
        "volume = np.abs(np.dot(v1, np.cross(v2, v3)))\n",
        "print(\"Volume of the parallelepiped:\", volume)\n",
        "\n",
        "v1 = np.array([2, 1])\n",
        "v2 = np.array([-1, 1])\n",
        "dot_product = np.dot(v1, v2)\n",
        "if dot_product == 0:\n",
        "\n",
        "\n",
        "v1 = np.array([4, 2, 1])\n",
        "v2 = np.array([1, 3, 2])\n",
        "cos_theta = np.dot(v1, v2) / (np.linalg.norm(v1) * np.linalg.norm(v2))\n",
        "angle = np.arccos(cos_theta)\n",
        "\n",
        "\n",
        "a = np.array([1, 2, 3])\n",
        "b = np.array([4, 5, 6])\n",
        "c = np.array([7, 8, 9])\n",
        "\n",
        "lhs = np.cross(a, np.cross(b, c))\n",
        "rhs = (np.dot(a, c) * b) - (np.dot(a, b) * c)\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "1hzBcHJT3SWZ",
        "outputId": "9af73e0c-b528-4921-ee7a-b8cc67c1c8fe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Area of the triangle: 1.5\n",
            "Volume of the parallelepiped: 3\n",
            "Vectors are not perpendicular.\n",
            "Angle between vectors (in radians): 0.7956029534845351\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# 13. Vectors III\n",
        "def vectors_iii():\n",
        "    print(\"\\n13. Vectors III Solutions\")\n",
        "\n",
        "    # Problem 1\n",
        "    A = np.array([1, 2])\n",
        "    B = np.array([3, -2])\n",
        "    ratio = 1 / 3\n",
        "    point = (1 - ratio) * A + ratio * B\n",
        "    print(f\"1. Dividing the line segment: Point = {point}\")\n",
        "\n",
        "    # Problem 2\n",
        "    a = np.array([3, 4])\n",
        "    proj_ox = [a[0], 0]\n",
        "    proj_oy = [0, a[1]]\n",
        "    print(f\"2. Projection onto OX = {proj_ox}, Projection onto OY = {proj_oy}\")\n",
        "\n",
        "    # Problem 3\n",
        "    a = np.array([2, 3])\n",
        "    b = np.array([1, 1])\n",
        "    proj_ab = (np.dot(a, b) / np.dot(b, b)) * b\n",
        "    print(f\"3. Projection of a onto b = {proj_ab}\")\n",
        "\n",
        "    # Problem 4\n",
        "    proj_ba = (np.dot(b, a) / np.dot(a, a)) * a\n",
        "    print(f\"4. Projection of b onto a = {proj_ba}\")"
      ],
      "metadata": {
        "id": "ole5tUXk32Pz"
      },
      "execution_count": 1,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "\n",
        "# 14. Equations of Lines on a Plane\n",
        "def equations_of_lines_on_a_plane():\n",
        "    print(\"\\n14. Equations of Lines on a Plane Solutions\")\n",
        "\n",
        "    # Problem 1\n",
        "    A = np.array([1, 2])\n",
        "    B = np.array([3, 4])\n",
        "    slope = (B[1] - A[1]) / (B[0] - A[0])\n",
        "    intercept = A[1] - slope * A[0]\n",
        "    print(f\"1. Line equation: y = {slope}x + {intercept}\")\n",
        "\n",
        "    # Problem 2\n",
        "    parallel_slope = 2\n",
        "    intercept_parallel = 2 - parallel_slope * 1\n",
        "    print(f\"2. Parallel line: y = {parallel_slope}x + {intercept_parallel}\")\n",
        "\n",
        "    # Problem 3\n",
        "    perpendicular_slope = -1 / 2\n",
        "    intercept_perpendicular = 2 - perpendicular_slope * 1\n",
        "    print(f\"3. Perpendicular line: y = {perpendicular_slope}x + {intercept_perpendicular}\")\n",
        "\n",
        "    # Problem 4\n",
        "    def intersection(m1, c1, m2, c2):\n",
        "        x = (c2 - c1) / (m1 - m2)\n",
        "        y = m1 * x + c1\n",
        "        return x, y\n",
        "\n",
        "    x_inter, y_inter = intersection(2, 3, 3, 2)\n",
        "    print(f\"4. Intersection point: ({x_inter}, {y_inter})\")\n",
        "\n",
        "    # Problem 5\n",
        "    v = np.array([2, 3])\n",
        "    line_eq = f\"(x - 1) / {v[0]} = (y - 2) / {v[1]}\"\n",
        "    print(f\"5. Line parallel to vector v: {line_eq}\")\n",
        "\n",
        "    # Problem 6\n",
        "    print(f\"6. Perpendicular line to y = 2x + 3: y = {-1/2}x + b (b can be calculated for a specific point)\")\n",
        "\n",
        "    # Problem 7\n",
        "    distance = abs(2*1 - 1*2 + 3) / math.sqrt(2**2 + (-1)**2)\n",
        "    print(f\"7. Distance from point to line: {distance}\")\n",
        "\n",
        "    # Problem 8\n",
        "    A = np.array([2, 0])\n",
        "    B = np.array([0, 3])\n",
        "    slope = (B[1] - A[1]) / (B[0] - A[0])\n",
        "    intercept = A[1] - slope * A[0]\n",
        "    print(f\"8. Line equation: y = {slope}x + {intercept}\")\n",
        "\n",
        "    # Problem 9\n",
        "    angle = math.atan(1) * (180 / math.pi)  # slope = 1\n",
        "    print(f\"9. Angle with OX axis: {angle} degrees\")\n",
        "\n",
        "    # Problem 10\n",
        "    normal_vector = np.array([1, 1])\n",
        "    print(f\"10. Perpendicular vector: {normal_vector}\")"
      ],
      "metadata": {
        "id": "EnkitfrhiYBb"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "# 15. Equations of second-order curves (conic sections)\n",
        "\n",
        "\n",
        "    # Problem 1\n",
        "    print(\"1. Circle equation: (x - 1)^2 + (y - 2)^2 = 9\")\n",
        "\n",
        "    # Problem 2\n",
        "    points = np.array([\n",
        "        [2**2, 2, 1],  # x=2\n",
        "        [4**2, 4, 1],  # x=4\n",
        "        [3**2, 3, 1]   # x=3\n",
        "    ])\n",
        "    results = np.array([0, 0, 1])  # y-values\n",
        "    coefficients = np.linalg.solve(points, results)\n",
        "    a, b, c = coefficients\n",
        "    print(f\"2. Parabola equation: y = {a:.2f}x^2 + {b:.2f}x + {c:.2f}\")\n",
        "\n",
        "    # Problem 3: Center of ellipse\n",
        "    print(\"3. Ellipse center: (2, 2)\")\n",
        "\n",
        "    # Problem 4\n",
        "    print(\"4. Tangent line slope: 5\")\n",
        "\n",
        "    # Problem 5\n",
        "    print(\"5. Solve equations x^2 - y^2 = 1 and 2x^2 + 4y^2 = 6\")\n",
        "\n",
        "    # Problem 6\n",
        "    a, b = 1, 1\n",
        "    c = math.sqrt(a**2 + b**2)\n",
        "    distance = 2 * c\n",
        "    print(f\"6. Distance between branches: {distance}\")\n",
        "  # Run the function\n",
        "equations_of_second_order_curves()\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "It1mYFHqjmcI",
        "outputId": "40b6b38e-32c2-4972-b7ee-66622d772009"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "15. Equations of Second-Order Curves Solutions\n",
            "1. Circle equation: (x - 1)^2 + (y - 2)^2 = 9\n",
            "2. Parabola equation: y = -1.00x^2 + 6.00x + -8.00\n",
            "3. Ellipse center: (2, 2)\n",
            "4. Tangent line slope: 5\n",
            "5. Solve equations x^2 - y^2 = 1 and 2x^2 + 4y^2 = 6\n",
            "6. Distance between branches: 2.8284271247461903\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "# 16. Equations of planes in space\n",
        "def plane_from_points(A, B, C):\n",
        "    v1 = B - A\n",
        "    v2 = C - A\n",
        "    normal = np.cross(v1, v2)\n",
        "    D = -np.dot(normal, A)\n",
        "    return (*normal, D)\n",
        "\n",
        "A = np.array([1, 2, 3])\n",
        "B = np.array([3, 4, 5])\n",
        "C = np.array([2, 1, 4])\n",
        "\n",
        "plane = plane_from_points(A, B, C)\n",
        "print(\"Plane equation: {}x + {}y + {}z + {} = 0\".format(*plane))\n",
        "\n",
        "point = np.array([1, 2, 3])\n",
        "normal = np.array([2, 3, 4])  # normal vector of the given plane\n",
        "D = -np.dot(normal, point)\n",
        "print(f\"Plane equation: {normal[0]}x + {normal[1]}y + {normal[2]}z + {D} = 0\")\n",
        "\n",
        "point = np.array([1, 2, 3])\n",
        "normal = np.array([2, 3, 4])\n",
        "D = -np.dot(normal, point)\n",
        "print(f\"Plane equation: {normal[0]}x + {normal[1]}y + {normal[2]}z + {D} = 0\")\n",
        "\n",
        "A = np.array([2, 3, 4])\n",
        "B = np.array([3, 4, 5])\n",
        "D1, D2 = -5, -6  # Constant terms from plane equations Ax + By + Cz + D = 0\n",
        "\n",
        "direction = np.cross(A, B)  # Direction vector of the line\n",
        "point_on_line = np.linalg.solve([A, B], [-D1, -D2])  # Intersection point\n",
        "print(f\"Line equation: r = {point_on_line} + t{direction}\")\n",
        "\n",
        "normal = np.array([2, 3, 4])  # Given plane's normal\n",
        "D_parallel = -5  # Example constant for a parallel plane\n",
        "print(f\"Parallel plane: {normal[0]}x + {normal[1]}y + {normal[2]}z + {D_parallel} = 0\")\n",
        "\n",
        "perpendicular_point = np.array([1, 2, 3])\n",
        "print(f\"Perpendicular plane: {normal[0]}x + {normal[1]}y + {normal[2]}z + {np.dot(normal, perpendicular_point)} = 0\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "sml3sSI3j1qy",
        "outputId": "10d749ca-f223-4053-9ed9-61dc80a8c1e9"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Plane equation: 4x + 0y + -4z + 8 = 0\n",
            "Plane equation: 2x + 3y + 4z + -20 = 0\n",
            "Plane equation: 2x + 3y + 4z + -20 = 0\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "LinAlgError",
          "evalue": "Last 2 dimensions of the array must be square",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mLinAlgError\u001b[0m                               Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-12-1bd303cd5cbf>\u001b[0m in \u001b[0;36m<cell line: 32>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     30\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     31\u001b[0m \u001b[0mdirection\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcross\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Direction vector of the line\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 32\u001b[0;31m \u001b[0mpoint_on_line\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlinalg\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msolve\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mA\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mB\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mD1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mD2\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# Intersection point\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     33\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"Line equation: r = {point_on_line} + t{direction}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36msolve\u001b[0;34m(a, b)\u001b[0m\n\u001b[1;32m    394\u001b[0m     \u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_makearray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m     \u001b[0m_assert_stacked_2d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 396\u001b[0;31m     \u001b[0m_assert_stacked_square\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    397\u001b[0m     \u001b[0mb\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwrap\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_makearray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    398\u001b[0m     \u001b[0mt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mresult_t\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_commonType\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0ma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/numpy/linalg/linalg.py\u001b[0m in \u001b[0;36m_assert_stacked_square\u001b[0;34m(*arrays)\u001b[0m\n\u001b[1;32m    211\u001b[0m         \u001b[0mm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0ma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mm\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mn\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 213\u001b[0;31m             \u001b[0;32mraise\u001b[0m \u001b[0mLinAlgError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Last 2 dimensions of the array must be square'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    214\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0m_assert_finite\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mLinAlgError\u001b[0m: Last 2 dimensions of the array must be square"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 17. Equations of Second-Order Surfaces\n",
        "center = np.array([1, 2, 3])\n",
        "radius = 3\n",
        "print(f\"(x - {center[0]})^2 + (y - {center[1]})^2 + (z - {center[2]})^2 = {radius**2}\")\n",
        "\n",
        "sphere1_center = np.array([0, 0, 0])\n",
        "sphere2_center = np.array([1, 0, 0])\n",
        "radius1, radius2 = 1, 1\n",
        "\n",
        "dist = np.linalg.norm(sphere1_center - sphere2_center)\n",
        "if dist < radius1 + radius2:\n",
        "    print(\"The spheres intersect.\")\n",
        "else:\n",
        "    print(\"The spheres do not intersect.\")\n",
        "\n",
        "point = np.array([1, 0, 1])\n",
        "gradient = np.array([2 * (point[0] - 1), 2 * point[1], -1])\n",
        "tangent_plane = f\"{gradient[0]}(x - {point[0]}) + {gradient[1]}(y - {point[1]}) + {gradient[2]}(z - {point[2]}) = 0\"\n",
        "print(\"Tangent plane equation:\", tangent_plane)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oioJIKYSk59z",
        "outputId": "5c2c6cde-15c6-4598-c0ba-6388fe266bb6"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(x - 1)^2 + (y - 2)^2 + (z - 3)^2 = 9\n",
            "The spheres intersect.\n",
            "Tangent plane equation: 0(x - 1) + 0(y - 0) + -1(z - 1) = 0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 18. Functions\n",
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "x = np.linspace(-10, 10, 100)\n",
        "\n",
        "# Functions\n",
        "f = x**2\n",
        "g = x**3\n",
        "h = np.exp(x)\n",
        "j = np.sin(x)\n",
        "\n",
        "# Plot\n",
        "plt.plot(x, f, label='f(x) = x^2')\n",
        "plt.plot(x, g, label='g(x) = x^3')\n",
        "plt.plot(x, h, label='h(x) = e^x')\n",
        "plt.plot(x, j, label='j(x) = sin(x)')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Values at x = 2\n",
        "x_value = 2\n",
        "print(f\"f({x_value}) = {x_value**2}\")\n",
        "print(f\"g({x_value}) = {x_value**3}\")\n",
        "print(f\"h({x_value}) = {np.exp(x_value)}\")\n",
        "print(f\"j({x_value}) = {np.sin(x_value)}\")\n",
        "\n",
        "f = lambda x: 3 * x - 1\n",
        "g = lambda x: np.sqrt(x)\n",
        "\n",
        "x = 4\n",
        "print(f\"f(g({x})) = {f(g(x))}\")\n",
        "print(f\"g(f({x})) = {g(f(x))}\")\n",
        "\n",
        "import sympy as sp\n",
        "\n",
        "x = sp.symbols('x')\n",
        "f = 3 * x - 1\n",
        "inverse_f = sp.solve(f - x, x)[0]\n",
        "print(\"Inverse of f(x) = 3x - 1 is:\", inverse_f)\n",
        "\n",
        "# Function f\n",
        "points = [(1, 7), (2, 9), (3, 11)]\n",
        "inverse_points = [(y, x) for x, y in points]\n",
        "print(\"Inverse of f:\", inverse_points)\n",
        "\n",
        "# Function g\n",
        "g_points = [(1, 7), (2, 7), (3, 11)]\n",
        "g_inverse = [(y, x) for x, y in g_points]\n",
        "print(\"Inverse of g:\", g_inverse)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 586
        },
        "id": "CKu3PaXXlDc9",
        "outputId": "2375382c-74de-4533-9ab5-b602d2712629"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "f(2) = 4\n",
            "g(2) = 8\n",
            "h(2) = 7.38905609893065\n",
            "j(2) = 0.9092974268256817\n",
            "f(g(4)) = 5.0\n",
            "g(f(4)) = 3.3166247903554\n",
            "Inverse of f(x) = 3x - 1 is: 1/2\n",
            "Inverse of f: [(7, 1), (9, 2), (11, 3)]\n",
            "Inverse of g: [(7, 1), (7, 2), (11, 3)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 19. Limits of Sequences\n",
        "from sympy import limit, oo, symbols\n",
        "\n",
        "n = symbols('n')\n",
        "\n",
        "# First limit\n",
        "expr1 = (n**2 + 3 * n) / (2 * n**2 + n)\n",
        "lim1 = limit(expr1, n, oo)\n",
        "print(\"Limit 1:\", lim1)\n",
        "\n",
        "# Second limit\n",
        "expr2 = (2 * n + 3)**3 / (n - 1)\n",
        "lim2 = limit(expr2, n, oo)\n",
        "print(\"Limit 2:\", lim2)\n",
        "\n",
        "from sympy import sin\n",
        "\n",
        "expr = sin(n) / n\n",
        "lim = limit(expr, n, oo)\n",
        "print(\"Limit using squeeze theorem:\", lim)\n",
        "\n",
        "a_n = (1 + 1/n)**n\n",
        "lim_seq = limit(a_n, n, oo)\n",
        "print(\"Limit of sequence:\", lim_seq)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-wCnGt9nlMOD",
        "outputId": "e29e5b37-52a7-4724-ec4e-722756460cf4"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Limit 1: 1/2\n",
            "Limit 2: oo\n",
            "Limit using squeeze theorem: 0\n",
            "Limit of sequence: E\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 20. Limits of Real Functions\n",
        "x = symbols('x')\n",
        "\n",
        "# First limit\n",
        "expr1 = (x**2 + 2 * x) / (x**2 - 3 * x)\n",
        "lim1_pos = limit(expr1, x, oo)\n",
        "lim1_neg = limit(expr1, x, -oo)\n",
        "print(\"Limit 1 as x -> +∞:\", lim1_pos)\n",
        "print(\"Limit 1 as x -> -∞:\", lim1_neg)\n",
        "\n",
        "# Second limit\n",
        "expr2 = sin(3 * x) / x\n",
        "lim2 = limit(expr2, x, oo)\n",
        "print(\"Limit 2:\", lim2)\n",
        "\n",
        "expr3 = (2 * x**2 + 1) / (x**2 - 1)\n",
        "\n",
        "# Horizontal asymptotes\n",
        "hor_asymp_pos = limit(expr3, x, oo)\n",
        "hor_asymp_neg = limit(expr3, x, -oo)\n",
        "print(\"Horizontal asymptotes:\", hor_asymp_pos, hor_asymp_neg)\n",
        "\n",
        "# Vertical asymptotes\n",
        "vertical_asymp = sp.solve(1/(x**2 - 1), x)\n",
        "print(\"Vertical asymptotes:\", vertical_asymp)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "dQ96xlrTlpEM",
        "outputId": "9fecf756-9011-4433-9d1e-5a697b4d5f32"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Limit 1 as x -> +∞: 1\n",
            "Limit 1 as x -> -∞: 1\n",
            "Limit 2: 0\n",
            "Horizontal asymptotes: 2 2\n",
            "Vertical asymptotes: []\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 21. Derivatives\n",
        "import sympy as sp\n",
        "\n",
        "x = sp.symbols('x')\n",
        "\n",
        "functions = [\n",
        "    3 * x + 3,\n",
        "    sp.sin(x),\n",
        "    4 + sp.sin(x),\n",
        "    2 * x**3 - 3 * x**2 + 8 * x - 9,\n",
        "    x**(1/3),\n",
        "    sp.exp(x),\n",
        "    sp.cos(x) + sp.sin(x),\n",
        "    2 * sp.sin(3 * x) * sp.cos(x),\n",
        "    sp.sin(x),\n",
        "    (x + 1) * sp.ln(x + 1),\n",
        "    sp.sin(x) / x,\n",
        "    sp.exp(-2 * x),\n",
        "    x / sp.sqrt(x**2 + 1)\n",
        "]\n",
        "\n",
        "for f in functions:\n",
        "    print(f\"f(x) = {f}, f'(x) = {sp.diff(f, x)}\")\n",
        "\n",
        "f = sp.ln(sp.sin(x))\n",
        "derivative = sp.diff(f, x)\n",
        "print(f\"Derivative of ln(sin(x)) = {derivative}\")\n",
        "\n",
        "f = sp.cos(x)\n",
        "f_derivative = sp.diff(f, x)\n",
        "print(f\"f'(x) = {f_derivative}, -f(x) = {-f}\")\n",
        "\n",
        "# First limit\n",
        "expr1 = sp.sin(x) / x\n",
        "limit1 = sp.limit(expr1, x, 0)\n",
        "print(f\"Limit 1: {limit1}\")\n",
        "\n",
        "# Second limit\n",
        "expr2 = sp.ln(x) / x\n",
        "limit2 = sp.limit(expr2, x, sp.oo)\n",
        "print(f\"Limit 2: {limit2}\")\n",
        "\n",
        "t = sp.symbols('t')\n",
        "position = 3 * t**2 - 6 * t + 1\n",
        "\n",
        "velocity = sp.diff(position, t)\n",
        "acceleration = sp.diff(velocity, t)\n",
        "\n",
        "print(f\"Velocity: {velocity}, Acceleration: {acceleration}\")\n",
        "time = 2\n",
        "print(f\"At t=2: V(2) = {velocity.subs(t, time)}, A(2) = {acceleration.subs(t, time)}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MaEY_a6Klv8_",
        "outputId": "0bb890eb-dee4-4f06-a9a2-f6a09b0843fb"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "f(x) = 3*x + 3, f'(x) = 3\n",
            "f(x) = sin(x), f'(x) = cos(x)\n",
            "f(x) = sin(x) + 4, f'(x) = cos(x)\n",
            "f(x) = 2*x**3 - 3*x**2 + 8*x - 9, f'(x) = 6*x**2 - 6*x + 8\n",
            "f(x) = x**0.333333333333333, f'(x) = 0.333333333333333/x**0.666666666666667\n",
            "f(x) = exp(x), f'(x) = exp(x)\n",
            "f(x) = sin(x) + cos(x), f'(x) = -sin(x) + cos(x)\n",
            "f(x) = 2*sin(3*x)*cos(x), f'(x) = -2*sin(x)*sin(3*x) + 6*cos(x)*cos(3*x)\n",
            "f(x) = sin(x), f'(x) = cos(x)\n",
            "f(x) = (x + 1)*log(x + 1), f'(x) = log(x + 1) + 1\n",
            "f(x) = sin(x)/x, f'(x) = cos(x)/x - sin(x)/x**2\n",
            "f(x) = exp(-2*x), f'(x) = -2*exp(-2*x)\n",
            "f(x) = x/sqrt(x**2 + 1), f'(x) = -x**2/(x**2 + 1)**(3/2) + 1/sqrt(x**2 + 1)\n",
            "Derivative of ln(sin(x)) = cos(x)/sin(x)\n",
            "f'(x) = -sin(x), -f(x) = -cos(x)\n",
            "Limit 1: 1\n",
            "Limit 2: 0\n",
            "Velocity: 6*t - 6, Acceleration: 6\n",
            "At t=2: V(2) = 6, A(2) = 6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# 22. Extremum\n",
        "u = sp.symbols('u')\n",
        "profit = -2 * u**2 + 50 * u - 300\n",
        "\n",
        "critical_points = sp.solve(sp.diff(profit, u), u)\n",
        "max_profit = max([profit.subs(u, p) for p in critical_points])\n",
        "print(f\"Units sold for maximum profit: {critical_points}, Maximum profit: {max_profit}\")\n",
        "\n",
        "length = sp.symbols('length')\n",
        "width = 10 - length\n",
        "area = length * width\n",
        "\n",
        "critical_length = sp.solve(sp.diff(area, length), length)\n",
        "optimal_length = critical_length[0]\n",
        "optimal_width = 10 - optimal_length\n",
        "print(f\"Dimensions: Length = {optimal_length}, Width = {optimal_width}\")\n",
        "\n",
        "f = x**3 + 3 * x - 5\n",
        "\n",
        "critical_points = sp.solve(sp.diff(f, x), x)\n",
        "extrema = {p: f.subs(x, p) for p in critical_points}\n",
        "print(f\"Critical points: {critical_points}, Extrema: {extrema}\")\n",
        "\n",
        "f = (2 * x**2 + 1) / (x**2 - 1)\n",
        "\n",
        "critical_points = sp.solve(sp.diff(f, x), x)\n",
        "extrema = {p: f.subs(x, p) for p in critical_points}\n",
        "print(f\"Critical points: {critical_points}, Extrema: {extrema}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Y_rANkY1mAJv",
        "outputId": "50c4ed7c-1d7a-46da-fe5c-93c82a3c1f1a"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Units sold for maximum profit: [25/2], Maximum profit: 25/2\n",
            "Dimensions: Length = 5, Width = 5\n",
            "Critical points: [-I, I], Extrema: {-I: -5 - 2*I, I: -5 + 2*I}\n",
            "Critical points: [0], Extrema: {0: -1}\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "DDwQaJ3lm5E8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "LTaZRe4Xm2bx"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}